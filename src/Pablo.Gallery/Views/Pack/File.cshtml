@using System.Web.Configuration
@using Humanizer
@using Pablo.Gallery.Api.ApiModels
﻿@model Pablo.Gallery.Models.File
@{
	ViewBag.Title = Model.Pack.Name + "\\" + Model.FileName + " by " + (Model.Artists.Count > 0 ? Model.Artists.Where(fa => !fa.IsDeleted).Select(fa => fa.Artist.Alias).Humanize("and") : "Unknown");
	var show = Request["display"] != "true";
	ViewBag.ShowNav = show;
	ViewBag.PreviewImageUrl = Request.Url.Scheme + System.Uri.SchemeDelimiter + Request.Url.Host + Url.Content(Model.PreviewUrl(maxWidth: 320));	
}
@if (show) {
	<h2>@Html.ActionLink(Model.Pack.Name, "Detail", new { pack = Model.Pack.Name })\@Model.FileName</h2>
	<div class="artistInfo">
	</div>
	<p>
		<a href="@Url.Content(Model.DownloadUrl())">Download File</a>
	</p>
}
else {
	<h3>@Model.FileName</h3>
}

<p class="main-image">
	@Html.Partial("_type_" + Model.OutputType, Model)
</p>

@section Scripts {
	<script id="artist-template" type="text/x-jsrender">
	<label for="artists">Artists: </label>
	<span class="view">
		<ul class="list">
		{{if artists && artists.length}}
		{{for artists}}
		<li class="artist">
			<a href="@Url.RootUrl(){{:url}}">{{:alias}}</a>
		</li>
		{{/for}}
		{{else}}
		<li class="artist">
			<a>Unknown</a>
		</li>
		{{/if}}
		</ul>
		(@if (Request.IsAuthenticated) {<text><a href="#" class="edit">Edit</a></text>} else {<text>@Html.ActionLink("Log in to edit", "Login", "Account", routeValues: null, htmlAttributes: new { id = "loginLink" })</text>})
	</span>
	<span class="edit">
		<input type="text" class="artists" id="artists" data-artists="{{:~json(artists)}}" />
	</span>


</script>
	<script>
		var template = $.templates("#artist-template");
		$(function() {
			$(".artistInfo").pageloader({
				url: '@Url.RouteUrl("api", new {httproute = "", Controller = "Pack", id = Model.Pack.Name, path = Model.Name})',
				template: "#artist-template",
				loading: "#loading",
				selector: function (data) { return data; },
				enableScroll: false,
				onComplete: function() {
					$(".artists").select2({
						placeholder: "Add an artist",
						tags: [],
						tokenSeparators: [","],
						minimumInputLength: 1,
						initSelection: function(element, callback) {
							var data = [];
							data.artists = $(element).data("artists");
							callback(data);
						},
						createSearchChoice: function(term, data) {
							if ($(data).filter(function() { return this.text.localeCompare(term) === 0; }).length === 0) {
								return { id: term, text: term }
							}
						},
						// TODO: Infinite Scroll with Remote Data http://ivaynberg.github.io/select2/#infinite
						ajax: {
							url: "@Url.RouteUrl("api", new {httproute = "", Controller = "Artist"})",
						dataType: 'json',
						type: 'GET',
						data: function(term, page) {
							return {
								query: term,
								// size: 10
							};
						},
						results: function(data, page) {
							return {
								results: $.map(data.artists, function(item) {
									return {
										text: item.alias,
										slug: item.slug,
										id: item.alias
									}
								})
							};
						}
					}
					});
					
				}
			});

			// TODO: Update "view" mode when list changes
			// TODO: Pull all of the artist info from API and load via AJAX (to make sure changes slip through a CDN)
			$(".artistInfo").on("change", ".artists", function (e) {
				if (e.added) {
					$.ajax({
						url: "@Url.RouteUrl("apipath", new {httproute = "", Controller = "Pack", id = @Model.Pack.Name, path = @Model.Name})?alias=" + e.added.id,
						type: 'PUT',
						success: function(data) {
							$(".artistInfo").html($.templates("#artist-template").render(data));
						}
					});
				} else if (e.removed) {
					$.ajax({
						url: "@Url.RouteUrl("apipath", new {httproute = "", Controller = "Pack", id = @Model.Pack.Name, path = @Model.Name})?alias=" + e.removed.id,
						type: 'DELETE',
						success: function(data) {
							$(".artistInfo").html($.templates("#artist-template").render(data));
						}

					});
				}
				// Update the "view" rendered content
				var data = [];
				$(e.val).each(function() {
					data.push({ id: this, text: this });
				});
				$(".artistInfo").html($.templates("#artist-template").render(data));
			});

			// Show tag editor when "Edit" is clicked
			$(".artistInfo").on("click", "a.edit", function(e) {
				$(this).parents(".artistInfo").find("span.edit").show();
				$(this).parents(".view").hide();
			});

			// Hide tag editor when user clicks out of select2
			$(".artistInfo").on("select2-blur", ".artists", function (e) {
				$(this).parents(".artistInfo").find(".view").show();
				$(this).parents(".artistInfo").find("span.edit").hide();
			});
		});

		function stringify(value) {
			return JSON.stringify(value);
		}

		$.views.helpers({ json: stringify });

	</script>
}
